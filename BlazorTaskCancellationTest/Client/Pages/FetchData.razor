@page "/fetchdata"
@using BlazorTaskCancellationTest.Shared
@using System.Threading.Tasks
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>
<button class="btn btn-primary" @onclick=@LoadData disabled=@loading>Load data</button>
<button class="btn btn-danger" @onclick=@Cancel disabled=@(!loading)>Cancel</button>
<button class="btn btn-primary" @onclick=@ResetData>Reset data</button>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (forecasts != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherForecast> forecasts;
    private bool loading = false;
    private CancellationTokenSource dataLoadingSource;

    private async void LoadData()
    {
        loading = true;
        StateHasChanged();

        dataLoadingSource = new CancellationTokenSource();
        var dataLoadingTask = Http.GetFromJsonAsync<List<WeatherForecast>>(
            "WeatherForecast", dataLoadingSource.Token);

        try
        {
            forecasts = await dataLoadingTask;
        }
        catch (TaskCanceledException e)
        {
            
        }

        loading = false;
        StateHasChanged();
    }

    private void Cancel()
    {
        dataLoadingSource.Cancel();
        loading = false;
    }

    private void ResetData()
    {
        if (loading)
            Cancel();
        forecasts = null;
    }
}
